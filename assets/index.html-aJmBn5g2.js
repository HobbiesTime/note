import{_ as e,c as s,a as n,o as r}from"./app-B0M5dEOx.js";const o={};function h(d,a){return r(),s("div",null,a[0]||(a[0]=[n('<h2 id="框架自身" tabindex="-1"><a class="header-anchor" href="#框架自身"><span>框架自身</span></a></h2><h3 id="虚拟dom" tabindex="-1"><a class="header-anchor" href="#虚拟dom"><span><strong><code>虚拟DOM</code></strong></span></a></h3><h3 id="diff算法" tabindex="-1"><a class="header-anchor" href="#diff算法"><span><strong><code>DIFF算法</code></strong></span></a></h3><h3 id="任务调度机制" tabindex="-1"><a class="header-anchor" href="#任务调度机制"><span><strong><code>任务调度机制</code></strong></span></a></h3><h3 id="fiber架构" tabindex="-1"><a class="header-anchor" href="#fiber架构"><span><strong><code>Fiber架构</code></strong></span></a></h3><h3 id="批量更新" tabindex="-1"><a class="header-anchor" href="#批量更新"><span><strong><code>批量更新</code></strong></span></a></h3><h3 id="concurrent-mode并发" tabindex="-1"><a class="header-anchor" href="#concurrent-mode并发"><span><strong><code>Concurrent Mode并发</code></strong></span></a></h3><h3 id="react-memo" tabindex="-1"><a class="header-anchor" href="#react-memo"><span><strong><code>React.memo</code></strong></span></a></h3><h3 id="purecomponent" tabindex="-1"><a class="header-anchor" href="#purecomponent"><span><strong><code>PureComponent</code></strong></span></a></h3><h3 id="suspense和lazy-loading" tabindex="-1"><a class="header-anchor" href="#suspense和lazy-loading"><span><strong><code>Suspense和Lazy Loading</code></strong></span></a></h3><h3 id="usememo和usecallback" tabindex="-1"><a class="header-anchor" href="#usememo和usecallback"><span><strong><code>useMemo和useCallback</code></strong></span></a></h3><h3 id="usetransition-和-usedeferredvalue" tabindex="-1"><a class="header-anchor" href="#usetransition-和-usedeferredvalue"><span><strong><code>useTransition 和 useDeferredValue</code></strong></span></a></h3><h2 id="响应式角度" tabindex="-1"><a class="header-anchor" href="#响应式角度"><span>响应式角度</span></a></h2><h3 id="context-provide和usecontext" tabindex="-1"><a class="header-anchor" href="#context-provide和usecontext"><span><strong><code>Context.Provide和useContext</code></strong></span></a></h3><h2 id="渲染角度" tabindex="-1"><a class="header-anchor" href="#渲染角度"><span>渲染角度</span></a></h2><h3 id="组件拆分" tabindex="-1"><a class="header-anchor" href="#组件拆分"><span><strong><code>组件拆分</code></strong></span></a></h3><h3 id="虚拟滚动" tabindex="-1"><a class="header-anchor" href="#虚拟滚动"><span><strong><code>虚拟滚动</code></strong></span></a></h3><h3 id="条件渲染" tabindex="-1"><a class="header-anchor" href="#条件渲染"><span><strong><code>条件渲染</code></strong></span></a></h3><h3 id="组件动态加载、路由懒加载" tabindex="-1"><a class="header-anchor" href="#组件动态加载、路由懒加载"><span><strong><code>组件动态加载、路由懒加载</code></strong></span></a></h3><h3 id="列表key值绑定" tabindex="-1"><a class="header-anchor" href="#列表key值绑定"><span><strong><code>列表key值绑定</code></strong></span></a></h3><h2 id="状态管理角度" tabindex="-1"><a class="header-anchor" href="#状态管理角度"><span>状态管理角度</span></a></h2><h3 id="全局状态里选择性响应、或状态模块化" tabindex="-1"><a class="header-anchor" href="#全局状态里选择性响应、或状态模块化"><span><strong><code>全局状态里选择性响应、或状态模块化</code></strong></span></a></h3><h3 id="状态下沉" tabindex="-1"><a class="header-anchor" href="#状态下沉"><span><strong><code>状态下沉</code></strong></span></a></h3><h2 id="事件处理角度" tabindex="-1"><a class="header-anchor" href="#事件处理角度"><span>事件处理角度</span></a></h2><h3 id="节流防抖" tabindex="-1"><a class="header-anchor" href="#节流防抖"><span><strong><code>节流防抖</code></strong></span></a></h3><h3 id="事件委托" tabindex="-1"><a class="header-anchor" href="#事件委托"><span><strong><code>事件委托</code></strong></span></a></h3><h3 id="事件处理逻辑尽量轻" tabindex="-1"><a class="header-anchor" href="#事件处理逻辑尽量轻"><span><strong><code>事件处理逻辑尽量轻</code></strong></span></a></h3><h2 id="缓存角度" tabindex="-1"><a class="header-anchor" href="#缓存角度"><span>缓存角度</span></a></h2><h2 id="工程化角度" tabindex="-1"><a class="header-anchor" href="#工程化角度"><span>工程化角度</span></a></h2><h3 id="ssr" tabindex="-1"><a class="header-anchor" href="#ssr"><span><strong><code>SSR</code></strong></span></a></h3><h3 id="tree-shaking-和代码分割" tabindex="-1"><a class="header-anchor" href="#tree-shaking-和代码分割"><span><strong><code>Tree Shaking 和代码分割</code></strong></span></a></h3><h2 id="跨线程角度" tabindex="-1"><a class="header-anchor" href="#跨线程角度"><span>跨线程角度</span></a></h2><h3 id="复杂计算交给web-worker" tabindex="-1"><a class="header-anchor" href="#复杂计算交给web-worker"><span><strong><code>复杂计算交给Web worker</code></strong></span></a></h3><h2 id="资源加载角度" tabindex="-1"><a class="header-anchor" href="#资源加载角度"><span>资源加载角度</span></a></h2><h3 id="配置https多路复用" tabindex="-1"><a class="header-anchor" href="#配置https多路复用"><span><strong><code>配置https多路复用</code></strong></span></a></h3><h3 id="图片懒加载" tabindex="-1"><a class="header-anchor" href="#图片懒加载"><span><strong><code>图片懒加载</code></strong></span></a></h3><h3 id="图片使用webp格式" tabindex="-1"><a class="header-anchor" href="#图片使用webp格式"><span><strong><code>图片使用webp格式</code></strong></span></a></h3><h3 id="开启服务器端压缩如gzip等" tabindex="-1"><a class="header-anchor" href="#开启服务器端压缩如gzip等"><span><strong><code>开启服务器端压缩如gzip等</code></strong></span></a></h3>',38)]))}const c=e(o,[["render",h],["__file","index.html.vue"]]),i=JSON.parse('{"path":"/learn/react/40YvoCb5TNcGQV1X3J/","title":"React optimizations","lang":"en-US","frontmatter":{"title":"React optimizations","createTime":"2025/01/22 14:06:44","permalink":"/learn/react/40YvoCb5TNcGQV1X3J/","author":"Jack","tags":["React体系","React"],"description":"description"},"headers":[],"readingTime":{"minutes":0.71,"words":214},"git":{"updatedTime":1738634180000,"contributors":[{"name":"美神猎手","username":"美神猎手","email":"meishenlieshou@users.noreply.github.com","commits":1,"avatar":"https://avatars.githubusercontent.com/美神猎手?v=4","url":"https://github.com/美神猎手"}],"changelog":[{"hash":"326fc81d784b5098476179d73ff3ab8d0a9c86bc","date":1738634180000,"email":"meishenlieshou@users.noreply.github.com","author":"美神猎手","message":"b","commitUrl":"https://github.com/meishenlieshou/note/commit/326fc81d784b5098476179d73ff3ab8d0a9c86bc"}]},"filePathRelative":"notes/learn/react/React optimizations.md","bulletin":false}');export{c as comp,i as data};
